apiVersion: apps/v1
kind: Deployment
metadata:
  name: guard
  labels:
    app: guard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: guard
  template:
    metadata:
      labels:
        app: guard
    spec:
      imagePullSecrets:
      - name: "sf-gitlab-registry-creds"
      containers:
      - name: guard
        image: registry.gitlab.com/innovatrics/smartface/guard:v1.0.64
        ports:
          - containerPort: 8000
        env:
          - name: HOST
            value: "0.0.0.0"
          - name: PORT
            value: "8000"
          - name: CORE_API_ROOT
            value: {{ printf "https://%s/api/v1" .Values.smartface.authApi.dnsHost | quote }}
          - name: GRAPHQL_ROOT
            value: {{ printf "https://%s/graphql" .Values.smartface.graphqlApi.dnsHost | quote }}  
          - name: HASURA_GRAPHQL_ENDPOINT
            value: "http://guard-graphql-engine:8080/v1/graphql"
          - name: HASURA_GRAPHQL_ADMIN_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.guardSecrets.existingSecretName }}
                key: {{ .Values.configurations.guardSecrets.hasuraAdminSecretKey }}
          - name: LOG_LEVEL
            value: "debug"
          - name: ENABLE_LOGGING
            value: "true"
          - name: AUTH0_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configurations.auth.existingSecretName }}
                key: {{ .Values.configurations.auth.audienceKey }}
          - name: "AUTH0_DOMAIN"
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configurations.stationAuth.existingSecretName }}
                key: {{ .Values.configurations.stationAuth.domainKey }}
          - name: "AUTH0_ISSUER"
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configurations.stationAuth.existingSecretName }}
                key: {{ .Values.configurations.stationAuth.issuerKey }}
          - name: "AUTH0_JWKS_URI"
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configurations.stationAuth.existingSecretName }}
                key: {{ .Values.configurations.stationAuth.jwksUriKey }}
          - name: "AUTH0_AUTHENTICATION_ENABLED"
            value: "true"
          - name: "AUTH0_CLIENT_ID"
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.stationAuthCredentials.existingSecretName }}
                key: {{ .Values.configurations.stationAuthCredentials.clientIdKey }}
          - name: AUTH0_M2M_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.tenantAuth.existingSecretName }}
                key: {{ .Values.configurations.tenantAuth.clientSecretKey }}
          - name: AUTH0_M2M_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configurations.auth.existingSecretName }}
                key: {{ .Values.configurations.auth.oauthTokenUrlKey }}
          - name: AUTH0_M2M_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configurations.auth.existingSecretName }}
                key: {{ .Values.configurations.auth.audienceKey }}
          - name: AUTH0_M2M_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.tenantAuth.existingSecretName }}
                key: {{ .Values.configurations.tenantAuth.clientIdKey }}

          - name: FE_VAPID_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeVapidKeyKey }}
          - name: FE_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeApiKeyKey }}
          - name: FE_AUTH_DOMAIN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeAuthDomainKey }}     
          - name: FE_PROJECT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeProjectIdKey }}
          - name: FE_STORAGE_BUCKET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeStorageBucketKey }}
          - name: FE_MESSAGING_SENDER_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeMessigingSenderIdKey }}
          - name: FE_APP_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeAppIdKey }}
          - name: FE_MEASUREMENT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingFeMeasurmentIdKey }}
          - name: NODE_TYPE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeTypeKey }}
          - name: NODE_PROJECT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeProjectIdKey }}
          - name: NODE_PRIVATE_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodePrivateKeyIdKey }}
          - name: NODE_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodePriveteKeyKey }}
          - name: NODE_CLIENT_EMAIL
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeClientEmailKey }}
          - name: NODE_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeClientIdKey }}
          - name: NODE_AUTH_URI
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeAuthUriKey }}
          - name: NODE_TOKEN_URI
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeTokenUriKey }}
          - name: NODE_AUTH_PROVIDER_X509_CERT_URL
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeAuthProviderX509CertUrlKey }}
          - name: NODE_CLIENT_X509_CERT_URL
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeClinetX509CertUrlKey }}
          - name: NODE_UNIVERSE_DOMAIN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.configurations.firebaseSecrets.existingSecretNameKey }}
                key: {{ .Values.configurations.firebaseSecrets.existingNodeUniverseDomainKey }}
          - name: TRIGGER_WATCHLIST_NAME_0
            value: "VIP"
          - name: TRIGGER_WATCHLIST_ATTENTION_LEVEL_0
            value: "4"
          - name: TRIGGER_WATCHLIST_NAME_1
            value: "unknown"
          - name: TRIGGER_WATCHLIST_ATTENTION_LEVEL_1
            value: "1"
          - name: TRIGGER_WATCHLIST_NAME_2
            value: "High risk"
          - name: TRIGGER_WATCHLIST_ATTENTION_LEVEL_2
            value: "3"
          - name: TRIGGER_WATCHLIST_NAME_3
            value: "Visitors"
          - name: TRIGGER_WATCHLIST_ATTENTION_LEVEL_3
            value: "0"
          - name: TRIGGER_WATCHLIST_NAME_4
            value: "Employes"
          - name: TRIGGER_WATCHLIST_ATTENTION_LEVEL_4
            value: "0"
          - name: LOITERING_MINIMAL_DETECTION_INTERVAL_SECONDS
            value: "30"
          - name: LOITERING_DETECTION_OCCURENCES_THRESHOLD
            value: "3"
          - name: LOITERING_ACTIVATION_LIMIT_SECONDS
            value: "120"
          - name: UNKNOWN_WATCHLIST_NAME
            value: "unknown"
          - name: UNKNOWN_PERSON_VISIT_TIMESPAN_SECONDS
            value: "300"
          - name: UNKNOWN_PERSON_ACTIVATION_LIMIT_SECONDS
            value: "60"
          - name: EXPIRED_MEMBER_ACTIVATION_LIMIT_SECONDS
            value: "60"